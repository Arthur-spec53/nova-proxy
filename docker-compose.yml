# Nova Proxy Docker Compose 配置
# 用于本地开发、测试和演示环境

services:
  # ============================================================================
  # Nova Proxy 服务器
  # ============================================================================
  nova-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_COMMIT: ${BUILD_COMMIT:-unknown}
        BUILD_DATE: ${BUILD_DATE:-unknown}
    container_name: nova-server
    hostname: nova-server
    restart: unless-stopped
    ports:
      - "8080:8080"   # QUIC 端口
      - "8443:8443"   # HTTPS 端口
      - "8081:8081"   # 健康检查端口
      - "9090:9090"   # Prometheus 指标端口
    volumes:
      - ./configs:/app/configs:ro
      - ./profiles:/opt/nova-proxy/profiles:ro
      - nova-logs:/app/logs
      - nova-data:/app/data
      - nova-certs:/app/certs
    environment:
      - NOVA_LOG_LEVEL=${LOG_LEVEL:-info}
      - NOVA_METRICS_ENABLED=true
      - NOVA_HEALTH_CHECK_ENABLED=true
      - GOMAXPROCS=2
      - GOGC=100
    networks:
      - nova-network
    healthcheck:
      test: ["CMD", "/app/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - prometheus
      - grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nova.rule=Host(`nova.local`)"
      - "traefik.http.services.nova.loadbalancer.server.port=8080"

  # ============================================================================
  # Nova Proxy 客户端（用于测试）
  # ============================================================================
  nova-client:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-client
    hostname: nova-client
    restart: "no"
    volumes:
      - ./configs:/app/configs:ro
      - ./profiles:/opt/nova-proxy/profiles:ro
      - nova-logs:/app/logs
    environment:
      - NOVA_SERVER_ADDR=nova-server:8080
      - NOVA_LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - nova-network
    depends_on:
      - nova-server
    command: ["/bin/sh", "-c", "sleep 10 && nova-client --server nova-server:8080 --test"]

  # ============================================================================
  # Prometheus 监控
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: nova-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - nova-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.local`)"

  # ============================================================================
  # Grafana 可视化
  # ============================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: nova-grafana
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - nova-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.local`)"

  # ============================================================================
  # Jaeger 分布式追踪
  # ============================================================================
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: nova-jaeger
    hostname: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - nova-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.local`)"

  # ============================================================================
  # Redis 缓存（可选）
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: nova-redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - nova-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Nginx 负载均衡器（可选）
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: nova-nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nova-certs:/etc/nginx/certs:ro
    networks:
      - nova-network
    depends_on:
      - nova-server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.local`)"

  # ============================================================================
  # Traefik 反向代理（开发环境）
  # ============================================================================
  traefik:
    image: traefik:v3.0
    container_name: nova-traefik
    hostname: traefik
    restart: unless-stopped
    ports:
      - "8000:80"   # 避免与nginx冲突
      - "8888:8080"  # Traefik Dashboard，避免与nova-server冲突
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - nova-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

# ============================================================================
# 网络配置
# ============================================================================
networks:
  nova-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# 数据卷配置
# ============================================================================
volumes:
  nova-logs:
    driver: local
  nova-data:
    driver: local
  nova-certs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local